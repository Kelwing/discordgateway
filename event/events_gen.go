package event

// Code generated - This file has been automatically generated by internal/generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt internal/constants/events.go and run go generate

import (
	"fmt"
	"strings"
)
import "errors"
import "math/bits"

type UnsupportedErr struct {
	UnsupportedFlags Flag
	SupportedFlags   Flag
}

func (err *UnsupportedErr) Error() string {
	return "unsupported events were detected: 0x" + fmt.Sprintf("%X", uint64(err.UnsupportedFlags))
}

type Flag uint64

func (f Flag) Size() int {
	return bits.OnesCount64(uint64(f))
}

func (f Flag) String() string {
	if f.Size() == 1 {
		str, err := String(f)
		if err != nil {
			return ""
		} else {
			return str
		}
	} else if f.Size() > 1 {
		strSlice, err := Strings(f)
		if err != nil {
			return ""
		} else {
			return "[" + strings.Join(strSlice, ", ") + "]"
		}
	} else {
		return ""
	}
}

const (
	_ Flag = 0b1 << iota
	// ChannelCreate Sent when a new channel is created, relevant to the current user. The inner payload is a DM channel or
	// guild channel object.
	//
	ChannelCreate

	// ChannelDelete Sent when a channel relevant to the current user is deleted. The inner payload is a DM or Guild channel object.
	//
	ChannelDelete

	// ChannelPinsUpdate Sent when a message is pinned or unpinned in a text channel. This is not sent when a pinned message is deleted.
	//
	ChannelPinsUpdate

	// ChannelUpdate Sent when a channel is updated. The inner payload is a guild channel object.
	//
	ChannelUpdate

	// GuildBanCreate Sent when a user is banned from a guild. The inner payload is a user object, with an extra guild_id key.
	//
	GuildBanCreate

	// GuildBanDelete Sent when a user is unbanned from a guild. The inner payload is a user object, with an extra guild_id key.
	//
	GuildBanDelete

	// GuildCreate This event can be sent in three different scenarios:
	//  1. When a user is initially connecting, to lazily load and backfill information for all unavailable guilds
	//     sent in the Ready event.
	// 	2. When a Guild becomes available again to the client.
	// 	3. When the current user joins a new Guild.
	//
	GuildCreate

	// GuildDelete Sent when a guild becomes unavailable during a guild outage, or when the user leaves or is removed from a guild.
	// The inner payload is an unavailable guild object. If the unavailable field is not set, the user was removed
	// from the guild.
	//
	GuildDelete

	// GuildEmojisUpdate Sent when a guild's emojis have been updated.
	//
	GuildEmojisUpdate

	// GuildIntegrationsUpdate Sent when a guild integration is updated.
	//
	GuildIntegrationsUpdate

	// GuildMemberCreate Sent when a new user joins a guild. The inner payload is a guild member object with these extra fields:
	//
	GuildMemberCreate

	// GuildMemberDelete Sent when a user is removed from a guild (leave/kick/ban).
	//
	GuildMemberDelete

	// GuildMemberUpdate Sent when a guild member is updated.
	//
	GuildMemberUpdate

	// GuildMembersChunk Sent in response to Gateway Request Guild Members.
	//
	GuildMembersChunk

	// GuildRoleCreate Sent when a guild role is created.
	//
	GuildRoleCreate

	// GuildRoleDelete Sent when a guild role is created.
	//
	GuildRoleDelete

	// GuildRoleUpdate Sent when a guild role is created.
	//
	GuildRoleUpdate

	// GuildUpdate Sent when a guild is updated. The inner payload is a guild object.
	//
	GuildUpdate

	// InteractionCreate Sent when a user in a guild uses a Slash Command. Inner payload is an Interaction.
	//
	InteractionCreate

	// InviteCreate Sent when a guild's invite is created.
	//
	InviteCreate

	// InviteDelete Sent when an invite is deleted.
	//
	InviteDelete

	// MessageCreate Sent when a message is created. The inner payload is a message object.
	//
	MessageCreate

	// MessageDelete Sent when a message is deleted.
	//
	MessageDelete

	// MessageDeleteBulk Sent when multiple messages are deleted at once.
	//
	MessageDeleteBulk

	// MessageReactionCreate Sent when a user adds a reaction to a message.
	//
	MessageReactionCreate

	// MessageReactionDelete Sent when a user removes a reaction from a message.
	//
	MessageReactionDelete

	// MessageReactionDeleteAll Sent when a user explicitly removes all reactions from a message.
	//
	MessageReactionDeleteAll

	// MessageReactionDeleteEmoji Sent when a bot removes all instances of a given emoji from the reactions of a message.
	//
	MessageReactionDeleteEmoji

	// MessageUpdate Sent when a message is updated. The inner payload is a message object.
	//
	// NOTE! Has _at_least_ the GuildID and ChannelID fields.
	//
	MessageUpdate

	// PresenceUpdate A user's presence is their current state on a guild. This event is sent when a user's presence is updated for a guild.
	//
	PresenceUpdate

	// Ready The ready event is dispatched when a client has completed the initial handshake with the gateway (for new sessions).
	// The ready event can be the largest and most complex event the gateway will send, as it contains all the state
	// required for a client to begin interacting with the rest of the platform.
	//
	Ready

	// Resumed The resumed event is dispatched when a client has sent a resume payload to the gateway
	// (for resuming existing sessions).
	//
	Resumed

	// TypingStart Sent when a user starts typing in a channel.
	//
	TypingStart

	// UserUpdate Sent when properties about the user change. Inner payload is a user object.
	//
	UserUpdate

	// VoiceServerUpdate Sent when a guild's voice server is updated. This is sent when initially connecting to voice, and when the current
	// voice instance fails over to a new server.
	//
	VoiceServerUpdate

	// VoiceStateUpdate Sent when someone joins/leaves/moves voice channels. Inner payload is a voice state object.
	//
	VoiceStateUpdate

	// WebhooksUpdate Sent when a guild channel's WebHook is created, updated, or deleted.
	//
	WebhooksUpdate
)

const (
	channelCreateString              = "CHANNEL_CREATE"
	channelDeleteString              = "CHANNEL_DELETE"
	channelPinsUpdateString          = "CHANNEL_PINS_UPDATE"
	channelUpdateString              = "CHANNEL_UPDATE"
	guildBanCreateString             = "GUILD_BAN_ADD"
	guildBanDeleteString             = "GUILD_BAN_REMOVE"
	guildCreateString                = "GUILD_CREATE"
	guildDeleteString                = "GUILD_DELETE"
	guildEmojisUpdateString          = "GUILD_EMOJIS_UPDATE"
	guildIntegrationsUpdateString    = "GUILD_INTEGRATIONS_UPDATE"
	guildMemberCreateString          = "GUILD_MEMBER_ADD"
	guildMemberDeleteString          = "GUILD_MEMBER_REMOVE"
	guildMemberUpdateString          = "GUILD_MEMBER_UPDATE"
	guildMembersChunkString          = "GUILD_MEMBERS_CHUNK"
	guildRoleCreateString            = "GUILD_ROLE_CREATE"
	guildRoleDeleteString            = "GUILD_ROLE_DELETE"
	guildRoleUpdateString            = "GUILD_ROLE_UPDATE"
	guildUpdateString                = "GUILD_UPDATE"
	interactionCreateString          = "INTERACTION_CREATE"
	inviteCreateString               = "INVITE_CREATE"
	inviteDeleteString               = "INVITE_DELETE"
	messageCreateString              = "MESSAGE_CREATE"
	messageDeleteString              = "MESSAGE_DELETE"
	messageDeleteBulkString          = "MESSAGE_DELETE_BULK"
	messageReactionCreateString      = "MESSAGE_REACTION_ADD"
	messageReactionDeleteString      = "MESSAGE_REACTION_REMOVE"
	messageReactionDeleteAllString   = "MESSAGE_REACTION_REMOVE_ALL"
	messageReactionDeleteEmojiString = "MESSAGE_REACTION_REMOVE_EMOJI"
	messageUpdateString              = "MESSAGE_UPDATE"
	presenceUpdateString             = "PRESENCE_UPDATE"
	readyString                      = "READY"
	resumedString                    = "RESUMED"
	typingStartString                = "TYPING_START"
	userUpdateString                 = "USER_UPDATE"
	voiceServerUpdateString          = "VOICE_SERVER_UPDATE"
	voiceStateUpdateString           = "VOICE_STATE_UPDATE"
	webhooksUpdateString             = "WEBHOOKS_UPDATE"
)

func All() Flag {
	return ChannelCreate | ChannelDelete | ChannelPinsUpdate | ChannelUpdate | GuildBanCreate | GuildBanDelete | GuildCreate | GuildDelete | GuildEmojisUpdate | GuildIntegrationsUpdate | GuildMemberCreate | GuildMemberDelete | GuildMemberUpdate | GuildMembersChunk | GuildRoleCreate | GuildRoleDelete | GuildRoleUpdate | GuildUpdate | InteractionCreate | InviteCreate | InviteDelete | MessageCreate | MessageDelete | MessageDeleteBulk | MessageReactionCreate | MessageReactionDelete | MessageReactionDeleteAll | MessageReactionDeleteEmoji | MessageUpdate | PresenceUpdate | Ready | Resumed | TypingStart | UserUpdate | VoiceServerUpdate | VoiceStateUpdate | WebhooksUpdate | 0
}

func String(flags Flag) (string, error) {
	nrOfFlags := flags.Size()
	if nrOfFlags == 0 {
		return "", errors.New("must be at least one event flag")
	}
	if nrOfFlags > 1 {
		return "", errors.New("can only name one event flag")
	}

	var name string
	switch flags {
	case ChannelCreate:
		name = channelCreateString
	case ChannelDelete:
		name = channelDeleteString
	case ChannelPinsUpdate:
		name = channelPinsUpdateString
	case ChannelUpdate:
		name = channelUpdateString
	case GuildBanCreate:
		name = guildBanCreateString
	case GuildBanDelete:
		name = guildBanDeleteString
	case GuildCreate:
		name = guildCreateString
	case GuildDelete:
		name = guildDeleteString
	case GuildEmojisUpdate:
		name = guildEmojisUpdateString
	case GuildIntegrationsUpdate:
		name = guildIntegrationsUpdateString
	case GuildMemberCreate:
		name = guildMemberCreateString
	case GuildMemberDelete:
		name = guildMemberDeleteString
	case GuildMemberUpdate:
		name = guildMemberUpdateString
	case GuildMembersChunk:
		name = guildMembersChunkString
	case GuildRoleCreate:
		name = guildRoleCreateString
	case GuildRoleDelete:
		name = guildRoleDeleteString
	case GuildRoleUpdate:
		name = guildRoleUpdateString
	case GuildUpdate:
		name = guildUpdateString
	case InteractionCreate:
		name = interactionCreateString
	case InviteCreate:
		name = inviteCreateString
	case InviteDelete:
		name = inviteDeleteString
	case MessageCreate:
		name = messageCreateString
	case MessageDelete:
		name = messageDeleteString
	case MessageDeleteBulk:
		name = messageDeleteBulkString
	case MessageReactionCreate:
		name = messageReactionCreateString
	case MessageReactionDelete:
		name = messageReactionDeleteString
	case MessageReactionDeleteAll:
		name = messageReactionDeleteAllString
	case MessageReactionDeleteEmoji:
		name = messageReactionDeleteEmojiString
	case MessageUpdate:
		name = messageUpdateString
	case PresenceUpdate:
		name = presenceUpdateString
	case Ready:
		name = readyString
	case Resumed:
		name = resumedString
	case TypingStart:
		name = typingStartString
	case UserUpdate:
		name = userUpdateString
	case VoiceServerUpdate:
		name = voiceServerUpdateString
	case VoiceStateUpdate:
		name = voiceStateUpdateString
	case WebhooksUpdate:
		name = webhooksUpdateString
	default:
		return "", errors.New("unknown event flag")
	}
	return name, nil
}

func StringToEvent(e string) (flag Flag, err error) {
	switch e {
	case channelCreateString:
		flag = ChannelCreate
	case channelDeleteString:
		flag = ChannelDelete
	case channelPinsUpdateString:
		flag = ChannelPinsUpdate
	case channelUpdateString:
		flag = ChannelUpdate
	case guildBanCreateString:
		flag = GuildBanCreate
	case guildBanDeleteString:
		flag = GuildBanDelete
	case guildCreateString:
		flag = GuildCreate
	case guildDeleteString:
		flag = GuildDelete
	case guildEmojisUpdateString:
		flag = GuildEmojisUpdate
	case guildIntegrationsUpdateString:
		flag = GuildIntegrationsUpdate
	case guildMemberCreateString:
		flag = GuildMemberCreate
	case guildMemberDeleteString:
		flag = GuildMemberDelete
	case guildMemberUpdateString:
		flag = GuildMemberUpdate
	case guildMembersChunkString:
		flag = GuildMembersChunk
	case guildRoleCreateString:
		flag = GuildRoleCreate
	case guildRoleDeleteString:
		flag = GuildRoleDelete
	case guildRoleUpdateString:
		flag = GuildRoleUpdate
	case guildUpdateString:
		flag = GuildUpdate
	case interactionCreateString:
		flag = InteractionCreate
	case inviteCreateString:
		flag = InviteCreate
	case inviteDeleteString:
		flag = InviteDelete
	case messageCreateString:
		flag = MessageCreate
	case messageDeleteString:
		flag = MessageDelete
	case messageDeleteBulkString:
		flag = MessageDeleteBulk
	case messageReactionCreateString:
		flag = MessageReactionCreate
	case messageReactionDeleteString:
		flag = MessageReactionDelete
	case messageReactionDeleteAllString:
		flag = MessageReactionDeleteAll
	case messageReactionDeleteEmojiString:
		flag = MessageReactionDeleteEmoji
	case messageUpdateString:
		flag = MessageUpdate
	case presenceUpdateString:
		flag = PresenceUpdate
	case readyString:
		flag = Ready
	case resumedString:
		flag = Resumed
	case typingStartString:
		flag = TypingStart
	case userUpdateString:
		flag = UserUpdate
	case voiceServerUpdateString:
		flag = VoiceServerUpdate
	case voiceStateUpdateString:
		flag = VoiceStateUpdate
	case webhooksUpdateString:
		flag = WebhooksUpdate
	default:
		return 0, errors.New("unknown event string")
	}
	return flag, nil
}

func Strings(flags Flag) (names []string, err error) {
	if flags.Size() == 0 {
		return nil, errors.New("must be at least one event flag")
	}

	for i := 0; i < int(All()); i = i << 1 {
		v := ((flags >> i) & 0b1) << i
		if v == 0 {
			continue
		}

		name, err := String(v)
		if err != nil {
			return nil, err
		}
		names = append(names, name)
	}
	return names, nil
}
