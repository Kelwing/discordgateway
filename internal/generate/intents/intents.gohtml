package intent

// Code generated - This file has been automatically generated by internal/generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt internal/constants/events.go and run go generate

import "errors"
import "math/bits"
import "github.com/andersfylling/discordgateway/event"
import "github.com/andersfylling/discordgateway/internal/constants"

type Flag constants.Intent

func (i Flag) Size() int {
    return bits.OnesCount64(uint64(i))
}

func (i Flag) EventFlags() (flags event.Flag) {
    if i.Size() == 0 {
        return 0
    }
    if i.Size() == 1 {
        return singularIntentToEventFlags(i)
    }

    for in := Flag(1); in < All(); in = in << 1 {
        if (in & i) == 0 {
            continue
        }

        flags |= singularIntentToEventFlags(in)
    }
    return flags
}

const (
{{- range .}}
    {{.}} Flag = {{.Intent}}
{{- end}}
)

func singularIntentToEventFlags(i Flag) (flags event.Flag) {
    switch i {
    {{- range .}}
    case {{.}}: flags = {{.Events}}
    {{- end}}
    }
    return flags
}

func All() Flag {
    return {{range .}}{{.}} | {{- end}} 0
}

func EventsToIntents(eventFlags event.Flag, dm bool) (Flag, error) {
    if eventFlags.Size() == 0 {
        return 0, errors.New("must be at least one event flag")
    }

    var intent Flag
{{- range .}}
    {{- if not .IsDM }}
        if (eventFlags & {{.}}.EventFlags()) > 0 {
            intent |= {{.}}
        }
    {{- end}}
{{- end}}

    if dm {
{{- range .}}
    {{- if .IsDM }}
        if (eventFlags & {{.}}.EventFlags()) > 0 {
            intent |= {{.}}
        }
    {{- end}}
{{- end}}
    }

    return intent, nil
}
